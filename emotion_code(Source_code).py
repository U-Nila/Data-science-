# -*- coding: utf-8 -*-
"""Emotion_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z2RH-ZwGBpdE2lpGH7XS-TZbpFLT2svU
"""

# Step 1: Upload Dataset (Only for Google Colab)
from google.colab import files
uploaded = files.upload()

# Step 2: Load the CSV
import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Elon musk_dataset.csv/elonmusk_dataset.csv')  # Replace with actual filename if different
df.head()

# Step 3: Basic Info
print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
df.info()
print(df.describe())


# Step 4: Missing values and duplicates
print("Missing values:\n", df.isnull().sum())
print("Duplicate rows:", df.duplicated().sum())

# Step 5: Visualizations
import seaborn as sns
import matplotlib.pyplot as plt

df['tweet_length'] = df['tweet'].astype(str).apply(len)

# Tweet length distribution
sns.histplot(df['tweet_length'], kde=True, bins=30, color='teal')
plt.title('Distribution of Tweet Lengths')
plt.xlabel('Tweet Length')
plt.ylabel('Frequency')
plt.show()

# Tweets per year
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: Convert 'date' column to datetime format
df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Step 2: Extract year from 'date'
df['year'] = df['date'].dt.year

# Step 3: Plot number of tweets per year
sns.countplot(data=df, x='year', palette='coolwarm')
plt.title('Number of Tweets per Year')
plt.xlabel('Year')
plt.ylabel('Tweet Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


# Top usernames
top_users = df['username'].value_counts().head(10)
top_users.plot(kind='bar', color='orange')
plt.title('Top 10 Users by Number of Tweets')
plt.xlabel('Username')
plt.ylabel('Tweet Count')
plt.show()

# Step 6: Sentiment Analysis using TextBlob
!pip install -q textblob
from textblob import TextBlob

def get_sentiment(text):
    polarity = TextBlob(str(text)).sentiment.polarity
    if polarity > 0:
        return 'positive'
    elif polarity == 0:
        return 'neutral'
    else:
        return 'negative'

df['sentiment'] = df['tweet'].apply(get_sentiment)
print(df[['tweet', 'sentiment']].head())

# Step 7: Train-Test Split
from sklearn.model_selection import train_test_split
X = df['tweet'].astype(str)
y = df['sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Step 8: TF-IDF + Logistic Regression Pipeline
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

model = Pipeline([
    ('tfidf', TfidfVectorizer(max_features=5000, stop_words='english')),
    ('clf', LogisticRegression(max_iter=1000))
])

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Step 9: Evaluation
print("✅ Accuracy:", accuracy_score(y_test, y_pred))
print("📊 Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

# Step 10: Test on new tweets
new_tweets = [
    "Tesla's new update is amazing!",
    "I'm not happy with Twitter's new algorithm.",
    "SpaceX launch was a huge success!",
    "This is just disappointing."
]
predictions = model.predict(new_tweets)
for tweet, sentiment in zip(new_tweets, predictions):
    print(f"Tweet: {tweet}\nPredicted Sentiment: {sentiment}\n")

# Step 11: Gradio Web App
!pip install -q gradio
import gradio as gr

def predict_sentiment(tweet):
    return model.predict([tweet])[0]

iface = gr.Interface(
    fn=predict_sentiment,
    inputs=gr.Textbox(lines=3, placeholder="Enter a tweet..."),
    outputs="text",
    title="Elon Musk Tweet Sentiment Analyzer",
    description="Enter a tweet related to Elon Musk to classify sentiment as Positive, Neutral, or Negative."
)
iface.launch()
